#include <iostream>
#include <cmath>
using namespace std;

bool isSafe(int board[][9], int row, int col, int num) {
    // Check if 'num' is present in the current row or column
    for (int x = 0; x < 9; ++x) {
        if (board[row][x] == num || board[x][col] == num) {
            return false;
        }
    }

    // Check if 'num' is present in the 3x3 subgrid
    int subgridRow = (row / 3) * 3;
    int subgridCol = (col / 3) * 3;
    for (int x = subgridRow; x < subgridRow + 3; ++x) {
        for (int y = subgridCol; y < subgridCol + 3; ++y) {
            if (board[x][y] == num) {
                return false;
            }
        }
    }

    return true;
}

bool solveSudoku(int board[][9], int row, int col) {
    // Base case: If all rows are processed, the puzzle is solved.
    if (row == 9) {
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }
        return true;
    }

    // If all columns in the current row are processed, move to the next row.
    if (col == 9) {
        return solveSudoku(board, row + 1, 0);
    }

    // If the cell is not empty, move to the next column.
    if (board[row][col] != 0) {
        return solveSudoku(board, row, col + 1);
    }

    // Recursive case: Try placing numbers from 1 to 9 in the empty cell.
    for (int num = 1; num <= 9; ++num) {
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;
            if (solveSudoku(board, row, col + 1)) {
                return true;
            }
            board[row][col] = 0; // Backtracking
        }
    }

    // No solution found for the current configuration.
    return false;
}

int main() {
    int board[9][9] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(board, 0, 0)) {
        cout << "Solution found" << endl;
    } else {
        cout << "No solution exists." << endl;
    }

    return 0;
}
